name: "⚡ EnigMano Win11 + CRD Deployment (fixed watchdog)"

on:
  workflow_dispatch:

jobs:
  deploy-enigmano:
    runs-on: windows-latest
    name: Deploy EnigMano (windows-latest) - Fixed

    steps:
      - name: 📌 Deployment Parameters
        shell: pwsh
        run: |
          Write-Host "==============================================="
          Write-Host "🔹 EnigMano Instance : windows-latest (fixed)"
          Write-Host "📦 Repository        : $env:GITHUB_REPOSITORY"
          Write-Host "RUNNER_TEMP         : $env:RUNNER_TEMP"
          Write-Host "GITHUB_WORKSPACE    : $env:GITHUB_WORKSPACE"
          Write-Host "==============================================="

      - name: ⚙️ Best-effort Windows optimizations (safe)
        shell: pwsh
        run: |
          Try {
            $hp = "8c5e7fda-e8bf-4a96-9a85-a6e23a8c635c"
            powercfg -setactive $hp
          } Catch { Write-Warning "Power plan change skipped: $_" }
          Try { Stop-Service -Name SysMain -Force -ErrorAction SilentlyContinue; Set-Service -Name SysMain -StartupType Disabled } Catch {}
          Try { Stop-Service -Name WSearch -Force -ErrorAction SilentlyContinue; Set-Service -Name WSearch -StartupType Disabled } Catch {}
          Try {
            $memBytes = (Get-CimInstance -ClassName Win32_PhysicalMemory -ErrorAction SilentlyContinue | Measure-Object -Property Capacity -Sum).Sum
            if ($memBytes -and $memBytes -gt 0) { $memMB = [math]::Round($memBytes / 1MB) } else { $memMB = 16000 }
            wmic computersystem where name="%computername%" set AutomaticManagedPagefile=False
            wmic pagefileset where name="C:\\pagefile.sys" delete
            wmic pagefileset create name="C:\\pagefile.sys"
            wmic pagefileset where name="C:\\pagefile.sys" set InitialSize=$memMB,MaximumSize=$memMB
          } Catch { Write-Warning "Pagefile change skipped: $_" }
          Try { Enable-MMAgent -MemoryCompression } Catch {}
          Try {
            $paths = @($env:RUNNER_TEMP, $env:GITHUB_WORKSPACE, "C:\Program Files (x86)\Google\Chrome Remote Desktop")
            foreach ($p in $paths) { if ($p -and (Test-Path $p)) { Add-MpPreference -ExclusionPath $p -ErrorAction SilentlyContinue } }
          } Catch {}

      - name: 📥 Install Chrome Remote Desktop
        shell: pwsh
        run: |
          $crdInstaller = "$env:TEMP\crdhost.msi"
          Invoke-WebRequest "https://dl.google.com/edgedl/chrome-remote-desktop/chromeremotedesktophost.msi" -OutFile $crdInstaller -UseBasicParsing -ErrorAction Stop
          Start-Process msiexec.exe -ArgumentList "/i `"$crdInstaller`" /quiet /norestart" -Wait
          Remove-Item $crdInstaller -Force -ErrorAction SilentlyContinue
          Write-Host "✅ CRD installer processed (if allowed)."

      - name: ⚔️ Start Chrome Remote Desktop Host (code & pin inline)
        shell: pwsh
        run: |
          # === INSERTED AUTH CODE & PIN (kept exactly as requested) ===
          $CRD_OAUTH_CODE = "4/0AVMBsJgLhAn6PWFzw7RVkRzu0G9NJq3HHCvQzGZM-Aa45edTbDJn9VDTo0WYKomZfXxSYA"
          $CRD_PIN = "123456"
          # ============================================================

          $possible = @(
            "${Env:ProgramFiles(x86)}\Google\Chrome Remote Desktop\CurrentVersion\remoting_start_host.exe",
            "${Env:ProgramFiles}\Google\Chrome Remote Desktop\CurrentVersion\remoting_start_host.exe"
          )
          $exe = $possible | Where-Object { Test-Path $_ } | Select-Object -First 1
          if (-not $exe) {
            Write-Warning "CRD executable not found; skipping start."
            exit 0
          }

          Write-Host "Starting CRD from: $exe"
          $args = @(
            "--code=`"$CRD_OAUTH_CODE`"",
            "--redirect-url=""https://remotedesktop.google.com/_/oauthredirect""",
            "--name=$Env:COMPUTERNAME",
            "--pin=$CRD_PIN"
          )
          $proc = Start-Process -FilePath $exe -ArgumentList $args -PassThru -WindowStyle Hidden
          Start-Sleep -Seconds 4
          Try { $proc.PriorityClass = 'High' } Catch { Write-Warning "Cannot set High priority: $_" }
          Try {
            $cores = (Get-CimInstance Win32_ComputerSystem).NumberOfLogicalProcessors
            if ($cores -and $cores -gt 0) {
              $mask = 0
              for ($i=0;$i -lt $cores;$i++){ $mask = $mask -bor (1 -shl $i) }
              $proc.ProcessorAffinity = $mask
            }
          } Catch { Write-Warning "Cannot set affinity: $_" }

      - name: 🔁 Watchdog (background for job duration) - FIXED
        shell: pwsh
        run: |
          # Recompute CRD auth and path inside this step (scope is local to step)
          $CRD_OAUTH_CODE = "4/0AVMBsJgLhAn6PWFzw7RVkRzu0G9NJq3HHCvQzGZM-Aa45edTbDJn9VDTo0WYKomZfXxSYA"
          $CRD_PIN = "123456"
          $possible = @(
            "${Env:ProgramFiles(x86)}\Google\Chrome Remote Desktop\CurrentVersion\remoting_start_host.exe",
            "${Env:ProgramFiles}\Google\Chrome Remote Desktop\CurrentVersion\remoting_start_host.exe"
          )
          $exe = $possible | Where-Object { Test-Path $_ } | Select-Object -First 1
          if (-not $exe) {
            Write-Warning "CRD executable not found for watchdog; skipping watchdog creation."
            exit 0
          }

          $watchdog = @"
param([int]\$seconds=21600)
\$crdExe = '$exe'
\$crdCode = '$CRD_OAUTH_CODE'
\$crdPin = '$CRD_PIN'
\$end = (Get-Date).AddSeconds(\$seconds)
while((Get-Date) -lt \$end) {
  if (-not (Get-Process -Name remoting_start_host -ErrorAction SilentlyContinue)) {
    try {
      Start-Process -FilePath \$crdExe -ArgumentList "--code=`"\$crdCode`" --redirect-url=""https://remotedesktop.google.com/_/oauthredirect"" --name=$Env:COMPUTERNAME --pin=\$crdPin" -WindowStyle Hidden
      Write-Output "[watchdog] restarted CRD at $(Get-Date)"
    } catch { Write-Output "[watchdog] restart failed: $_" }
  }
  Start-Sleep -Seconds 30
}
"@

          $path = Join-Path $env:TEMP "crd_watchdog.ps1"
          $watchdog | Out-File -FilePath $path -Encoding UTF8
          Start-Process -FilePath "powershell" -ArgumentList "-NoProfile -WindowStyle Hidden -ExecutionPolicy Bypass -File `"$path`" -seconds 21600" -NoNewWindow -ErrorAction SilentlyContinue
          Write-Host "-> Watchdog launched (background during job)."

      - name: 🕒 Keep Alive 6h Timer
        shell: pwsh
        run: |
          $total = 21600
          for ($s = $total; $s -ge 0; $s--) {
            if ($s % 60 -eq 0) { Write-Host "$s seconds remaining..." }
            Start-Sleep -Seconds 1
          }
          Write-Host "⏰ 6 hours elapsed for the job."

      - name: 💠 Final Status
        if: always()
        shell: pwsh
        run: |
          Write-Host "✅ EnigMano attempted on windows-latest (CRD start attempted)."
          Write-Host "🔋 Note: hosted runner resource limits remain; these tweaks only optimize usage."
