name: "‚ö° EnigMano Win11 + CRD + 19 Workers + Auto Dask Cluster"

on:
  workflow_dispatch:

jobs:
  # ================================
  # MASTER JOB = Chrome Remote Desktop + Dask Scheduler
  # ================================
  master:
    runs-on: windows-latest
    outputs:
      scheduler_ip: ${{ steps.get_ip.outputs.ip }}
    steps:
      - name: üìå Deployment Parameters
        shell: pwsh
        run: |
          Write-Host "==============================================="
          Write-Host "üîπ EnigMano MASTER Instance"
          Write-Host "üì¶ Repository : $env:GITHUB_REPOSITORY"
          Write-Host "==============================================="

      - name: üì• Install CRD + Python + Dask
        shell: pwsh
        run: |
          $crdInstaller = "$env:TEMP\crdhost.msi"
          Invoke-WebRequest "https://dl.google.com/edgedl/chrome-remote-desktop/chromeremotedesktophost.msi" -OutFile $crdInstaller
          Start-Process msiexec.exe -ArgumentList "/i `"$crdInstaller`" /quiet /norestart" -Wait
          Remove-Item $crdInstaller -Force
          Write-Host "‚úÖ Chrome Remote Desktop installed."

          python -m pip install --upgrade pip
          pip install dask distributed --quiet
          Write-Host "‚úÖ Python & Dask installed."

      - name: ‚öîÔ∏è Start Chrome Remote Desktop Host
        shell: pwsh
        run: |
          $exe = "${Env:ProgramFiles(x86)}\Google\Chrome Remote Desktop\CurrentVersion\remoting_start_host.exe"
          if (-not (Test-Path $exe)) { Write-Error "‚ùå CRD executable not found."; exit 1 }
          & $exe `
            --code="4/0AVGzR1BG-uVZC7dK_2sb9LF-DGS59rJLvOf7wzgx_XcxJShfYtnorSEFZNASAUPym4G2mQ" `
            --redirect-url="https://remotedesktop.google.com/_/oauthredirect" `
            --name=$Env:COMPUTERNAME `
            --pin=123456

      - name: üñ•Ô∏è Start Dask Scheduler
        shell: pwsh
        run: |
          Start-Process python -ArgumentList "-m distributed.cli.dask_scheduler --host 0.0.0.0 --port 8786" -NoNewWindow
          Write-Host "‚úÖ Dask Scheduler started on MASTER."

      - name: üåê Get Master IP
        id: get_ip
        shell: pwsh
        run: |
          $ip = (Test-Connection -ComputerName $env:COMPUTERNAME -Count 1).IPV4Address.IPAddressToString
          Write-Host "Master IP: $ip"
          echo "::set-output name=ip::$ip"

      # Keep Alive last
      - name: üïí MASTER Keep Alive (6h)
        shell: pwsh
        run: |
          $total = 21600
          for ($s = $total; $s -ge 0; $s--) {
            [Math]::Sqrt((Get-Random)) > $null
            $null = ,(New-Object byte[](1MB))
            if ($s % 60 -eq 0) { Write-Host "MASTER $s secondes restantes..." }
            Start-Sleep -Milliseconds 900
          }
          Write-Host "‚è∞ MASTER termin√© apr√®s 6h."

  # ================================
  # WORKERS = CPU/RAM boosters + Dask Workers
  # ================================
  workers:
    runs-on: windows-latest
    needs: []  # launch immediately
    strategy:
      matrix:
        instance: [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]
    steps:
      - name: üöÄ Worker ${{ matrix.instance }} Started
        shell: pwsh
        run: |
          Write-Host "‚ö° Worker ${{ matrix.instance }} boosting perf..."

      - name: üì• Install Python + Dask
        shell: pwsh
        run: |
          python -m pip install --upgrade pip
          pip install dask distributed --quiet
          Write-Host "‚úÖ Python & Dask installed on Worker ${{ matrix.instance }}"

      - name: üîó Connect Worker to Dask Scheduler
        shell: pwsh
        run: |
          $scheduler_ip = "${{ jobs.master.outputs.scheduler_ip }}"
          Start-Process python -ArgumentList "-m distributed.cli.dask_worker $scheduler_ip:8786" -NoNewWindow
          Write-Host "‚úÖ Worker ${{ matrix.instance }} connected to Dask Scheduler at $scheduler_ip:8786"

      - name: üî• Worker Load + Keep Alive (6h)
        shell: pwsh
        run: |
          $total = 21600
          $mem = @()
          for ($s = $total; $s -ge 0; $s--) {
            [Math]::Sqrt((Get-Random)) > $null
            $mem += ,(New-Object byte[](1MB))
            if ($s % 60 -eq 0) { Write-Host "Worker ${{ matrix.instance }} : $s secondes restantes..." }
            Start-Sleep -Milliseconds 900
          }
          Write-Host "‚è∞ Worker ${{ matrix.instance }} termin√© apr√®s 6h."
