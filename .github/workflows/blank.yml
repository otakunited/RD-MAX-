name: "‚ö° EnigMano Win11 + CRD + 19 Workers + Dask Cluster"

on:
  workflow_dispatch:

jobs:
  # ================================
  # MASTER JOB = Chrome Remote Desktop + Dask Scheduler
  # ================================
  master:
    runs-on: windows-latest
    outputs:
      master-ip: ${{ steps.get-ip.outputs.ip }}
    steps:
      - name: üìå Deployment Parameters
        shell: pwsh
        run: |
          Write-Host "==============================================="
          Write-Host "üîπ EnigMano MASTER Instance"
          Write-Host "üì¶ Repository : $env:GITHUB_REPOSITORY"
          Write-Host "==============================================="

      - name: üì• Install Chrome Remote Desktop
        shell: pwsh
        run: |
          $crdInstaller = "$env:TEMP\crdhost.msi"
          Invoke-WebRequest "https://dl.google.com/edgedl/chrome-remote-desktop/chromeremotedesktophost.msi" -OutFile $crdInstaller
          Start-Process msiexec.exe -ArgumentList "/i `"$crdInstaller`" /quiet /norestart" -Wait
          Remove-Item $crdInstaller -Force
          Write-Host "‚úÖ Chrome Remote Desktop installed."

      - name: ‚öîÔ∏è Start Chrome Remote Desktop Host
        shell: pwsh
        run: |
          $exe = "${Env:ProgramFiles(x86)}\Google\Chrome Remote Desktop\CurrentVersion\remoting_start_host.exe"
          if (-not (Test-Path $exe)) {
            Write-Error "‚ùå CRD executable not found at $exe"
            exit 1
          }

          & $exe `
            --code="4/0AVGzR1CempCC-ttKu9KkmzLR8WYEe33ENTxispOtEPcpnTA1pBDkxZcYQ4WT2seaYeoxmQ" `
            --redirect-url="https://remotedesktop.google.com/_/oauthredirect" `
            --name=$Env:COMPUTERNAME `
            --pin=123456

      - name: üêç Install Python + Dask
        shell: pwsh
        run: |
          Invoke-WebRequest -Uri "https://www.python.org/ftp/python/3.12.0/python-3.12.0-amd64.exe" -OutFile "$env:TEMP\python.exe"
          Start-Process "$env:TEMP\python.exe" -ArgumentList "/quiet InstallAllUsers=1 PrependPath=1" -Wait
          python -m pip install --upgrade pip
          pip install dask distributed

      - name: üîπ Get Master IP
        id: get-ip
        shell: pwsh
        run: |
          $ip = (Test-Connection -ComputerName (hostname) -Count 1).IPv4Address.IPAddressToString
          Write-Host "Master IP: $ip"
          echo "::set-output name=ip::$ip"

      - name: üïí MASTER Keep Alive & Dask Scheduler
        shell: pwsh
        run: |
          python - <<'PYTHON'
import time
from dask.distributed import Client, LocalCluster

cluster = LocalCluster(n_workers=0)  # Master only, no local workers
client = Client(cluster)
print("Dask MASTER scheduler running at:", client.scheduler_info()['address'])

# Keep alive 6h
for i in range(21600, 0, -1):
    if i % 60 == 0:
        print(f"MASTER Keep Alive: {i} seconds remaining...")
    time.sleep(1)
print("‚è∞ MASTER termin√© apr√®s 6h.")
PYTHON

  # ================================
  # WORKERS = CPU/RAM boosters
  # ================================
  workers:
    needs: master
    runs-on: windows-latest
    strategy:
      matrix:
        instance: [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]
    steps:
      - name: üöÄ Worker ${{ matrix.instance }} Started
        shell: pwsh
        run: |
          Write-Host "‚ö° Worker ${{ matrix.instance }} boosting perf..."

      - name: üêç Install Python + Dask
        shell: pwsh
        run: |
          Invoke-WebRequest -Uri "https://www.python.org/ftp/python/3.12.0/python-3.12.0-amd64.exe" -OutFile "$env:TEMP\python.exe"
          Start-Process "$env:TEMP\python.exe" -ArgumentList "/quiet InstallAllUsers=1 PrependPath=1" -Wait
          python -m pip install --upgrade pip
          pip install dask distributed

      - name: üî• Worker Load + Keep Alive (6h)
        shell: pwsh
        run: |
          $master_ip = "${{ needs.master.outputs.master-ip }}"
          python - <<PYTHON
import time
from dask.distributed import Worker

master_addr = "tcp://$master_ip:8786"
worker = Worker(master_addr, nthreads=2, memory_limit='16GB')
worker.run()
# Keep alive is included in worker run
PYTHON
