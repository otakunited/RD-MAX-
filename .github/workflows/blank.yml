name: "‚ö° EnigMano Win11 + CRD + 19 Dask Workers"

on:
  workflow_dispatch:

jobs:
  # ================================
  # MASTER JOB = Chrome Remote Desktop + Dask Scheduler
  # ================================
  master:
    runs-on: windows-latest
    outputs:
      scheduler_ip: ${{ steps.get_ip.outputs.ip }}
    steps:
      - name: üìå Deployment Parameters
        shell: pwsh
        run: |
          Write-Host "==============================================="
          Write-Host "üîπ EnigMano MASTER Instance"
          Write-Host "üì¶ Repository : $env:GITHUB_REPOSITORY"
          Write-Host "==============================================="

      - name: üì• Install Chrome Remote Desktop
        shell: pwsh
        run: |
          $crdInstaller = "$env:TEMP\crdhost.msi"
          Invoke-WebRequest "https://dl.google.com/edgedl/chrome-remote-desktop/chromeremotedesktophost.msi" -OutFile $crdInstaller
          Start-Process msiexec.exe -ArgumentList "/i `"$crdInstaller`" /quiet /norestart" -Wait
          Remove-Item $crdInstaller -Force
          Write-Host "‚úÖ Chrome Remote Desktop installed."

      - name: ‚ö° Install Python & Dask
        shell: pwsh
        run: |
          python -m pip install --upgrade pip
          pip install dask distributed --quiet
          Write-Host "‚úÖ Python + Dask installed."

      - name: ‚öîÔ∏è Start Chrome Remote Desktop Host
        shell: pwsh
        run: |
          $exe = "${Env:ProgramFiles(x86)}\Google\Chrome Remote Desktop\CurrentVersion\remoting_start_host.exe"
          if (-not (Test-Path $exe)) { Write-Error "‚ùå CRD executable not found"; exit 1 }
          & $exe `
            --code="4/0AVGzR1BONJRQlscSe0ikgIASR20XGJZZ_sRw5Ny_NvU7wTeTWXgF-SYngUgyO2wHEhrbNg" `
            --redirect-url="https://remotedesktop.google.com/_/oauthredirect" `
            --name=$Env:COMPUTERNAME `
            --pin=123456

      - name: üåê Get Scheduler IP
        id: get_ip
        shell: pwsh
        run: |
          $ip = (Get-NetIPAddress -AddressFamily IPv4 | Where-Object {$_.IPAddress -notlike "169.*"} | Select-Object -First 1 -ExpandProperty IPAddress)
          Write-Host "Scheduler IP: $ip"
          echo "::set-output name=ip::$ip"

      - name: üñ• Start Dask Scheduler
        shell: pwsh
        run: |
          Start-Process -NoNewWindow -FilePath python -ArgumentList "-m distributed.cli.dask_scheduler --port 8786"

      - name: üïí MASTER Keep Alive (background)
        shell: pwsh
        run: |
          $script = {
              $total = 21600
              $mem = @()
              for ($s = $total; $s -ge 0; $s--) {
                  [Math]::Sqrt((Get-Random)) > $null
                  $mem += ,(New-Object byte[](1MB))
                  if ($s % 60 -eq 0) { Write-Host "MASTER $s secondes restantes..." }
                  Start-Sleep -Milliseconds 900
              }
              Write-Host "‚è∞ MASTER termin√© apr√®s 6h."
          }
          Start-Job -ScriptBlock $script | Out-Null
          Write-Host "‚úÖ Keep-alive lanc√© en arri√®re-plan, le job master est libre."

  # ================================
  # WORKERS = CPU/RAM boosters
  # ================================
  workers:
    runs-on: windows-latest
    needs: master
    strategy:
      matrix:
        instance: [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]
    steps:
      - name: üì• Install Python & Dask
        shell: pwsh
        run: |
          python -m pip install --upgrade pip
          pip install dask distributed --quiet
          Write-Host "‚úÖ Worker Python + Dask installed."

      - name: ‚è± Wait 2 minutes before connecting
        shell: pwsh
        run: |
          Write-Host "‚è≥ Worker ${{ matrix.instance }} waiting 2 minutes before connecting to scheduler..."
          Start-Sleep -Seconds 120

      - name: üöÄ Connect Worker ${{ matrix.instance }} to Scheduler
        shell: pwsh
        run: |
          $scheduler = "${{ needs.master.outputs.scheduler_ip }}:8786"
          Start-Process -NoNewWindow -FilePath python -ArgumentList "-m distributed.cli.dask_worker $scheduler"

      - name: üî• Worker Load + Keep Alive (6h)
        shell: pwsh
        run: |
          $total = 21600
          $mem = @()
          for ($s = $total; $s -ge 0; $s--) {
              [Math]::Sqrt((Get-Random)) > $null
              $mem += ,(New-Object byte[](1MB))
              if ($s % 60 -eq 0) { Write-Host "Worker ${{ matrix.instance }} : $s secondes restantes..." }
              Start-Sleep -Milliseconds 900
          }
          Write-Host "‚è∞ Worker ${{ matrix.instance }} termin√© apr√®s 6h."
